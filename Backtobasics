# Python program to print calendar for given year 

# importing calendar library 
import calendar 

def printcalendar(year): 

# printing calendar 
    print(calendar.calendar(year)) 

# driver program to test above function 
year = 2019
printcalendar(year) 


#Deriving month,day 
from datetime import date
x = date.today()
print(x)
month = x.month
print(month)
day = x.day
year = x.year
print(year)


import datetime
tm = datetime.time(2, 25, 50, 13)
print(tm)
02:25:50.000013

import datetime

tm = datetime.time(1, 50, 20, 133257)

print('Time tm is ',
      tm.hour, ' hours ',
      tm.minute, ' minutes ',
      tm.second, ' seconds and ',
      tm.microsecond, ' microseconds')


from datetime import datetime

print(datetime.strptime('5/5/2019',
                        '%d/%m/%Y'))

2019-05-05 00:00:00

import datetime

x = datetime.datetime(2018, 5, 12, 2, 25, 50, 13)

print(x.strftime("%b %d %Y %H:%M:%S"))

May 12 2018 02:25:50


#Print all weekdays sequence starting with monday as first day of the week
import calendar
obj = calendar.Calendar(firstweekday=0)
for day in obj.iterweekdays()
    print(day)

not any([False, False, False]) will evaluate to true as it will check all false inside the brackets then converts to true

#SLICING
s = "Keepeyecontact"

# Retrieves characters from index 1 to 3: 'eek'
print(s[1:4])  

# Retrieves characters from beginning to index 2: 'Gee'
print(s[:3])   

# Retrieves characters from index 3 to the end: 'ksforGeeks'
print(s[3:])   

# Reverse a string
print(s[::-1])
eep
Kee
peyecontact
tcatnoceyepeeK

s = "   Gfg   "

# Removes spaces from both ends
print(s.strip())    

s = "Python is fun"

# Replaces 'fun' with 'awesome'
print(s.replace("fun", "awesome"))

#USING FORMAT()
s = "My name is {} and I am {} years old.".format("Alice", 22)
print(s)


##IMMUTABLE OBJECTS
#Integer
x = 5
print(id(x))  # Memory address of the object

x += 1  # Creates a new integer object
print(id(x))  # Different memory address, as integers are immutable


#Strings
s = "hello"
print(id(s))  # Memory address of the object

s += " world"  # Creates a new string object
print(id(s))  # Different memory address


#Tuple
t = (1, 2, 3)
print(id(t))  # Memory address of the object

t = t + (4,) # Creates a new tuple object
print(t)
print(id(t))  # Different memory address

a = True
b = a  # References the same immutable object
print(id(a), id(b))  # Same memory address

# Reassignment doesn't modify the original object
a = False
print(id(a), id(b))  # `a` now refers to a different immutable object


# Python program to demonstrate 
# type Casting 
# int variable
a = 5.9
# typecast to int
n = int(a)
print(n)
print(type(n))
#Output
5
<class 'int'>


# Python program to demonstrate 
# type Casting 
# string variable
a = "5.9"
# typecast to float
n = float(a)
print(n)
print(type(n))
#Output
5.9
<class 'float'>


num_str = "456"
num_int = int(num_str)  # Explicitly converting a string to an integer
print(num_int)
print(type(num_int))  # Output: <class 'int'>
#Output
456
<class 'int'>

#Dictionary logic
d =  {'key1': 'value1'}
val = d['key1']
print(val)


#Lists
a = [10, 20, 15]

print(a[0]) # access first item
a.append(11) # add item
a.remove(20) # remove item

print(a)

# From a tuple
a = list((1, 2, 3, 'apple', 4.5))  

print(a)

# Initialize an empty list
a = []

# Adding 10 to end of list
a.append(10)  
print("After append(10):", a)  

# Inserting 5 at index 0
a.insert(0, 5)
print("After insert(0, 5):", a) 

# Adding multiple elements  [15, 20, 25] at the end
a.extend([15, 20, 25])  
print("After extend([15, 20, 25]):", a)

Output
After append(10): [10]
After insert(0, 5): [5, 10]
After extend([15, 20, 25]): [5, 10, 15, 20, 25]

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# Access element at row 2, column 3
print(matrix[1][2])


a = [5,12,34,2]
largest = 0
for i in a :
    if i > largest:
        largest = i
print(largest)

from functools import reduce

a = [10, 24, 76, 23, 12]

# Find the largest number using reduce
largest = reduce(lambda x, y: x if x > y else y, a)

print(largest)

a = [10, 20, 30, 40, 50]

# Check if 30 exists in the list using a loop
key = 30
flag = False

for val in a:
    if val == key:
        flag = True
        break

if flag:
    print("Element exists in the list")
else:
    print("Element does not exist")
