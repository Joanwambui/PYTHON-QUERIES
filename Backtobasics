# Python program to print calendar for given year 

# importing calendar library 
import calendar 


def printcalendar(year): 

# printing calendar 
    print(calendar.calendar(year)) 

# driver program to test above function 
year = 2019
printcalendar(year) 


#Deriving month,day 
from datetime import date
x = date.today()
print(x)
month = x.month
print(month)
day = x.day
year = x.year
print(year)


import datetime
tm = datetime.time(2, 25, 50, 13)
print(tm)
02:25:50.000013

import datetime

tm = datetime.time(1, 50, 20, 133257)

print('Time tm is ',
      tm.hour, ' hours ',
      tm.minute, ' minutes ',
      tm.second, ' seconds and ',
      tm.microsecond, ' microseconds')


from datetime import datetime

print(datetime.strptime('5/5/2019',
                        '%d/%m/%Y'))

2019-05-05 00:00:00

import datetime

x = datetime.datetime(2018, 5, 12, 2, 25, 50, 13)

print(x.strftime("%b %d %Y %H:%M:%S"))

May 12 2018 02:25:50


#Print all weekdays sequence starting with monday as first day of the week
import calendar
obj = calendar.Calendar(firstweekday=0)
for day in obj.iterweekdays()
    print(day)

not any([False, False, False]) will evaluate to true as it will check all false inside the brackets then converts to true

#SLICING
s = "Keepeyecontact"

# Retrieves characters from index 1 to 3: 'eek'
print(s[1:4])  

# Retrieves characters from beginning to index 2: 'Gee'
print(s[:3])   

# Retrieves characters from index 3 to the end: 'ksforGeeks'
print(s[3:])   

# Reverse a string
print(s[::-1])
eep
Kee
peyecontact
tcatnoceyepeeK

s = "   Gfg   "

# Removes spaces from both ends
print(s.strip())    

s = "Python is fun"

# Replaces 'fun' with 'awesome'
print(s.replace("fun", "awesome"))

#USING FORMAT()
s = "My name is {} and I am {} years old.".format("Alice", 22)
print(s)


##IMMUTABLE OBJECTS
#Integer
x = 5
print(id(x))  # Memory address of the object

x += 1  # Creates a new integer object
print(id(x))  # Different memory address, as integers are immutable


#Strings
s = "hello"
print(id(s))  # Memory address of the object

s += " world"  # Creates a new string object
print(id(s))  # Different memory address


#Tuple
t = (1, 2, 3)
print(id(t))  # Memory address of the object

t = t + (4,) # Creates a new tuple object
print(t)
print(id(t))  # Different memory address

a = True
b = a  # References the same immutable object
print(id(a), id(b))  # Same memory address

# Reassignment doesn't modify the original object
a = False
print(id(a), id(b))  # `a` now refers to a different immutable object


# Python program to demonstrate 
# type Casting 
# int variable
a = 5.9
# typecast to int
n = int(a)
print(n)
print(type(n))
#Output
5
<class 'int'>


# Python program to demonstrate 
# type Casting 
# string variable
a = "5.9"
# typecast to float
n = float(a)
print(n)
print(type(n))
#Output
5.9
<class 'float'>


num_str = "456"
num_int = int(num_str)  # Explicitly converting a string to an integer
print(num_int)
print(type(num_int))  # Output: <class 'int'>
#Output
456
<class 'int'>

#Dictionary logic
d =  {'key1': 'value1'}
val = d['key1']
print(val)


#Lists
a = [10, 20, 15]

print(a[0]) # access first item
a.append(11) # add item
a.remove(20) # remove item

print(a)

# From a tuple
a = list((1, 2, 3, 'apple', 4.5))  

print(a)

# Initialize an empty list
a = []

# Adding 10 to end of list
a.append(10)  
print("After append(10):", a)  

# Inserting 5 at index 0
a.insert(0, 5)
print("After insert(0, 5):", a) 

# Adding multiple elements  [15, 20, 25] at the end
a.extend([15, 20, 25])  
print("After extend([15, 20, 25]):", a)

Output
After append(10): [10]
After insert(0, 5): [5, 10]
After extend([15, 20, 25]): [5, 10, 15, 20, 25]

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# Access element at row 2, column 3
print(matrix[1][2])


a = [5,12,34,2]
largest = 0
for i in a :
    if i > largest:
        largest = i
print(largest)

from functools import reduce

a = [10, 24, 76, 23, 12]

# Find the largest number using reduce
largest = reduce(lambda x, y: x if x > y else y, a)

print(largest)

a = [10, 20, 30, 40, 50]

# Check if 30 exists in the list using a loop
key = 30
flag = False

for val in a:
    if val == key:
        flag = True
        break

if flag:
    print("Element exists in the list")
else:
    print("Element does not exist")

a = [10, 20, 30, 40, 50]

# Check if 30 exists using any() function
flag = any(x == 30 for x in a)

if flag:
    print("Element exists in the list")
else:
    print("Element does not exist")


a = [10, 20, 30, 40, 50]

# Check if 30 exists in the list using count()
if a.count(30) > 0:
    print("Element exists in the list")
else:
    print("Element does not exist")


a = [10, 20, 30, 40, 50, 40, 60, 40, 70]

# Find the index of 40 between index positions 4 and 8
res = a.index(40, 4, 8)
print(res)

a = ['red', 'green', 'blue']

try:
    index = a.index('yellow')
    print(a)
except ValueError:
    print("'yellow' is not in the list")

a = [1, 2, 2, 3, 4, 4, 5]

# Remove duplicates by converting to a set
#though set does not mantain original order
a = list(set(a))

print(a)

a = [1, 2, 2, 3, 4, 4, 5]

# Create an empty list to store unique values
res = []

# Iterate through each value in the list 'a' to check duplicates
for val in a:
  
    # Check if the value is not already in 'res'
    if val not in res:
      
        # If not present, append it to 'res'
        res.append(val)

print(res)

a = [1, 2, 2, 3, 4, 4, 5]

# Create an empty list to store unique values
res = []

# Use list comprehension to append values to 'res'
# if they are not already present
[res.append(val) for val in a if val not in res]

print(res)

a = [1, 2, 2, 3, 4, 4, 5]

# Remove duplicates using dictionary fromkeys()
a = list(dict.fromkeys(a))

print(a)


a = [1, 2, 3, 4, 5]

# Create a new list that is a reversed list
# of 'a' using slicing
rev = a[::-1]

print(rev)

a = [1, 2, 3, 4, 5]

# Use list comprehension to create
# a reversed version of the list
rev = [a[i] for i in range(len(a) - 1, -1, -1)]
print(rev)

a = [10, 20, 30, 40]
res = sum(a)
print(res)

a = [10, 20, 30, 40]

# Initialize a variable to hold the sum
res = 0

# Loop through each value in the list
for val in a:
  
    # Add the current value to the sum
    res += val

print(res)

a = [1, 2, 3]
b = [4, 5, 6]

# Merge the two lists and assign
# the result to a new list
c = a + b
print(c)

a = [1, 2, 3]
b = [4, 5, 6]

# Add all elements from list 'b' to the end of list 'a'
a.extend(b)

print(a)

a = [1, 2, 3]
b = [4, 5, 6]

# Initialize an empty list to store the merged elements
res = []

# Append all elements from the first list
for val in a:
    res.append(val)

# Append all elements from the second list
for val in b:
    res.append(val)

print(res)

a = [1, 2, 3]
b = [4, 5, 6]

# Use the unpacking operator to merge the lists
c = [*a, *b]

print(c)

# imports chain function from itertools module
from itertools import chain

a = [1, 2, 3]
b = [4, 5, 6]

# Use itertools.chain to merge the lists in an efficient manner
c = list(chain(a, b))

print(c)

# Initializing a list
a = [5, 2, 9, 1, 5, 6]

# Sorting the list in ascending order
a.sort()
print("Sorted list (ascending):", a)

a.sort(reverse=True)
print("Sorted list (descending):", a)

# Initializing a list
a = [5, 2, 9, 1, 5, 6]

# Sorting the list in descending order
sa = sorted(a)
print("Sorted list (ascending):", sa)

sa = sorted(a, reverse=True)
print("Sorted list (descending):", sa)

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def myFun(p):
    return p.x

l = [Point(1, 15), Point(10, 5), Point(3, 8)]
l.sort(key=myFun)

for i in l:
    print(i.x, i.y)


# Slicing of a Tuple with Numbers
tup = tuple('GEEKSFORGEEKS')

# Removing First element
print(tup[1:])

# Reversing the Tuple
print(tup[::-1])

# Printing elements of a Range
print(tup[4:9])

# Creating a Tuple with nested tuples
tup1 = (0, 1, 2, 3)
tup2 = ('python', 'geek')
tup3 = (tup1, tup2)
print(tup3)
# Output
((0, 1, 2, 3), ('python', 'geek'))

a = [1, "Hello", [3.14, "world"]]
a.append(2)  # Add an integer to the end
print(a)
[1, 'Hello', [3.14, 'world'], 2]


import numpy as np

# Creating a NumPy array
arr = np.array([1, 2, 3, 4])

# Element-wise operations
print(arr * 2)  

# Multi-dimensional array
arr2d = np.array([[1, 2], [3, 4]])
print(arr2d * 2)
[2 4 6 8]
[[2 4]
 [6 8]]

import array as arr

# creating array of integers
a = arr.array('i', [1, 2, 3])

# accessing First Araay
print(a[0])

# Adding element to array
a.append(5)
print(a)
1
array('i', [1, 2, 3, 5])

import array as arr

# Integer array example
a = arr.array('i', [1, 2, 3])
print("Integer Array before insertion:", *a)

a.insert(1, 4)  # Insert 4 at index 1
print("Integer Array after insertion:", *a)
Integer Array before insertion: 1 2 3
Integer Array after insertion: 1 4 2 3

import array as arr
a = arr.array('i', [1, 2, 3, 4, 5, 6])

print(a[0])
print(a[3])

b = arr.array('d', [2.5, 3.2, 3.3])
print(b[1])
print(b[2])
Output
1
4
3.2
3.3
